import React, { useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  TextInput,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { FontAwesome5 as Icon } from '@expo/vector-icons';
import { joinCardByCode } from '../services/firestoreService'; // Join real por código
import { useAuth } from '../context/AuthContext';

const JoinCardScreen = ({ navigation }) => {
  const [shareCode, setShareCode] = useState('');
  const [loading, setLoading] = useState(false);
  const { user } = useAuth();

  const handleJoinCard = async () => {
    if (!shareCode.trim()) {
      Alert.alert('Error', 'Please enter a card code');
      return;
    }

    if (shareCode.length < 6) {
      Alert.alert('Error', 'The code must be exactly 6 characters');
      return;
    }

    setLoading(true);
    try {
      await joinCardByCode(user.uid, shareCode);
      Alert.alert('Success!', 'You have successfully joined the card', [
        { text: 'OK', onPress: () => navigation.goBack() }
      ]);
    } catch (error) {
      console.error('Error joining card:', error);

      // Provide more specific error messages based on the error type
      let errorMessage = 'Could not join with that code';

      if (error.message.includes('Invalid or expired')) {
        errorMessage = 'Invalid or expired code. The code may have been regenerated by the card owner.';
      } else if (error.message.includes('already a member')) {
        errorMessage = 'You are already a member of this card.';
      } else if (error.message.includes('no longer exists')) {
        errorMessage = 'The card associated with this code no longer exists.';
      } else if (error.message.includes('no longer shared')) {
        errorMessage = 'This card is no longer shared. Ask the owner to share it again.';
      } else if (error.message.includes('corrupted')) {
        errorMessage = 'The code is corrupt. Ask the owner for a new code.';
      } else if (error.message.includes('must be exactly')) {
        errorMessage = 'The code must be exactly 6 characters.';
      }

      Alert.alert('Error joining', errorMessage);
    } finally {
      setLoading(false);
    }
  };

  const formatCode = (text) => {
    // Only letters/numbers, 6 chars
    const formatted = text.toUpperCase().replace(/[^A-Z0-9]/g, '');
    return formatted.slice(0, 6);
  };

  return (
    <View style={styles.container}>
      <StatusBar style="dark" />
      
      <KeyboardAvoidingView 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.keyboardContainer}
      >
        <View style={styles.header}>
          <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>
            <Icon name="arrow-left" size={18} color="#666" />
          </TouchableOpacity>
          <Text style={styles.headerTitle}>Join Card</Text>
          <View style={styles.placeholder} />
        </View>

        <View style={styles.content}>
          <View style={styles.heroBox}>
            <Icon name="users" size={36} color="#007AFF" />
            <Text style={styles.title}>Join with code</Text>
            <Text style={styles.subtitle}>Enter the 6-character code to join the shared card</Text>
          </View>

          <View style={styles.codeSection}>
            <Text style={styles.inputLabel}>Share Code</Text>
            <TextInput
              style={styles.codeInput}
              placeholder="ABC123"
              placeholderTextColor="#999"
              value={shareCode}
              onChangeText={(text) => setShareCode(formatCode(text))}
              maxLength={6}
              autoCapitalize="characters"
              autoCorrect={false}
              autoFocus={true}
            />
            <Text style={styles.codeHelp}>
              {shareCode.length}/6 characters
            </Text>
            {shareCode.length === 6 && (
              <Text style={styles.codeHint}>
                The code will be automatically converted to uppercase
              </Text>
            )}
          </View>

          <TouchableOpacity
            style={[styles.joinButton, (!shareCode.trim() || loading) && styles.joinButtonDisabled]}
            onPress={handleJoinCard}
            disabled={!shareCode.trim() || loading}
          >
            <Icon 
              name={loading ? "spinner" : "user-plus"} 
              size={16} 
              color="#fff" 
              style={[styles.buttonIcon, loading && styles.spinning]} 
            />
            <Text style={styles.joinButtonText}>
              {loading ? 'Joining...' : 'Join card'}
            </Text>
          </TouchableOpacity>

          <View style={styles.infoSection}>
            <Icon name="info-circle" size={16} color="#666" />
            <Text style={styles.infoText}>By joining a shared card, you can see all transactions and add new ones</Text>
          </View>
        </View>
      </KeyboardAvoidingView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  keyboardContainer: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingTop: 60,
    paddingHorizontal: 20,
    paddingBottom: 20,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    backgroundColor: '#f8f9fa',
    justifyContent: 'center',
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  placeholder: {
    width: 40,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    justifyContent: 'flex-start',
  },
  heroBox: {
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
    borderRadius: 16,
    padding: 20,
    borderWidth: 1,
    borderColor: '#e9ecef',
    marginBottom: 20,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    marginBottom: 10,
  },
  subtitle: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    lineHeight: 22,
    marginBottom: 20,
    paddingHorizontal: 20,
  },
  codeSection: {
    marginBottom: 16,
  },
  inputLabel: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 12,
  },
  codeInput: {
    backgroundColor: '#f8f9fa',
    borderWidth: 2,
    borderColor: '#e9ecef',
    borderRadius: 12,
    padding: 20,
    fontSize: 24,
    fontWeight: 'bold',
    color: '#333',
    textAlign: 'center',
    letterSpacing: 2,
  },
  codeHelp: {
    fontSize: 12,
    color: '#666',
    textAlign: 'right',
    marginTop: 8,
  },
  codeHint: {
    fontSize: 11,
    color: '#007AFF',
    textAlign: 'center',
    marginTop: 6,
    fontStyle: 'italic',
  },
  joinButton: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#007AFF',
    borderRadius: 12,
    padding: 16,
    marginTop: 6,
    marginBottom: 16,
  },
  joinButtonDisabled: {
    backgroundColor: '#ccc',
  },
  buttonIcon: {
    marginRight: 8,
  },
  spinning: {
    // Aquí se puede agregar animación de rotación si se desea
  },
  joinButtonText: {
    color: '#fff',
    fontSize: 18,
    fontWeight: 'bold',
  },
  infoSection: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    backgroundColor: '#f8f9fa',
    borderRadius: 12,
    padding: 15,
  },
  infoText: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
    marginLeft: 10,
    flex: 1,
  },
});

export default JoinCardScreen; 
